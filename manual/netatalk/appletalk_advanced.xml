<?xml version="1.0" encoding="UTF-8"?>
<chapter id="appletalk advanced">
  <chapterinfo><date>09.01.2004</date> <author> <firstname>Thomas</firstname>
  <surname>Kaiser</surname> <contrib>initial version</contrib> </author>
  <pubdate>09 January, 2004</pubdate></chapterinfo>

  <title>Advanced Guide to AppleTalk</title>

  <sect1><title>Yesterday, ...</title> <sect2> <title>The early years</title>
  <para>Back in 1984 Apple copied the main concepts of the so called
  &#34;Cambridge Ring&#34;<indexterm><primary>Cambridge Ring</primary><secondary>AppleTalk&#39;s
  predecessor</secondary></indexterm>, the network technology developed mainly
  by Andy Hopper for Acorn<indexterm><primary>Acorn</primary><secondary>Developed
  AppleTalk basics</secondary></indexterm> together with the University of
  Cambridge.</para> <para>Different machines were interconnected via
  daisy-chaining in a bus topology with a maximum speed of 230 Kbps. From a
  today&#39;s point of view a very slow implementation. Farallon<indexterm><primary>Farallon</primary><secondary>One
  of the early AppleTalk adopters</secondary></indexterm> developed an
  alternative to the classic LocalTalk cabling, called PhoneNet<indexterm><primary>PhoneNet</primary><secondary>LocalTalk
  cabling alternative in the early days</secondary></indexterm> which allowed
  a star topology via Hubs, too.</para> <para>Later, additional physical
  layers have been added like Ethernet/IEEE 802.3 (EtherTalk)<indexterm><primary>EtherTalk</primary><secondary>AppleTalk
  on Ethernet or IEEE 802.3 hardware</secondary></indexterm>, FDDI<indexterm><primary>FDDI</primary><secondary>Fiber
  distributed data interface</secondary></indexterm> (FDDITalk)<indexterm><primary>FDDITalk</primary><secondary>AppleTalk
  on FDDI hardware</secondary></indexterm>, TokenRing<indexterm><primary>TokenRing</primary><secondary>Network
  Technology developed by IBM</secondary></indexterm> (TokenTalk)<indexterm><primary>TokenTalk</primary><secondary>AppleTalk
  on TokenRing hardware</secondary></indexterm> or using the Infrared port
  (IRTalk)<indexterm><primary>IRTalk</primary><secondary>AppleTalk over
  Infrared</secondary></indexterm>.</para> </sect2> <sect2> <title>Naming
  conventions change</title> <para>To be able to differentiate between the
  different physical transport layers, Apple changed the naming conventions.
  What has been known as &#34;AppleTalk&#34; before, is called
  &#34;LocalTalk&#34; from then on. &#34;AppleTalk&#34; itself is a synonym
  for Apple&#39;s networking techniques in general, including several
  underlying physical layers (see above) up to higher-level protocols that
  provide file and print services (see below)</para> </sect2> <sect2>
  <title>LocalTalk&#39;s heritage</title> <para>Due to the slow transmission
  speed of the original AppleTalk implementation, a packet size<indexterm><primary>Packet
  size</primary><secondary>maximum size of an AppleTalk packet</secondary></indexterm>
  of maximum 586 bytes has been chosen. This small packet size has been
  adopted to the other physical layers as well (making it possible to route
  AppleTalk packets transparently via routers between segments using different
  physical media).</para> <para>What has been a good compromise for LocalTalk,
  turned into one main disadvantage of AppleTalk running on top of other
  physical media: The inability to use the underlying network characteristics
  in an efficient way (an Ethernet frame is approx. 3 times larger than an
  AppleTalk packet, for example)</para> <para>With the increase of physical
  transfer speeds (100 Mbps with &#34;Fast Ethernet&#34; for example) the need
  for alternatives gained ground more and more. Apple decided to add different
  transportation layers for file services (Apple Filing Protocol). In the mid
  90s they developed a generic &#34;Data Stream Interface&#34; (DSI)<indexterm><primary>DSI</primary><secondary>Data
  Stream Interface</secondary> </indexterm> as an abstraction layer to be able
  to use AppleTalk over more efficient protocols like TCP/IP.</para>
  <para>For most of their customers nothing changed, because the Apple
  engineers integrated the ability to automagically switch between AppleTalk
  and TCP. People still used the chooser and AppleTalk to connect to the
  server but in case, both client and server were able to &#34;speak&#34; AFP
  over TCP, they switched the transport protocol without notifying the user.</para>
  </sect2></sect1>

  <sect1><title>...Today...</title></sect1>

  <sect2><title>For what is it used nowadays?</title> <para>The main reason to
  still run AppleTalk on a network is to provide users a comfortable way to
  locate and use network resources like printers/spoolers and file servers.</para>
  <para>Printing via AppleTalk (PAP) might sometimes be slower compared to
  IP-based alternatives like remote LPR<indexterm><primary>LPR</primary><secondary>Remote
  Line Printer protocol</secondary></indexterm>, TCP/IP streams<indexterm><primary>TCP/IP
  streams</primary><secondary>TCP/IP-based bidirectional printing protocol</secondary></indexterm>
  or IPP<indexterm><primary>IPP</primary><secondary>Internet Printing Protocol</secondary></indexterm>
  but it is a bidirectional protocol (built-in communication capabilities to
  negotiate printer settings like PPD to use, color or b/w, fonts, etc.),
  fully 8-bit save, and does not require temporary files on the client&#39;s
  side. In one word: It&#39;s foolproof... and that&#39;s why many network
  admins still love it :-)</para> <para>When it comes to file sharing,
  AppleTalk normally is only in use for locating the server. The connection
  itself will be established in most cases via TCP these days, since Apple
  provided the AppleShare client software back in 1997 with the ability to use
  AFP over TCP if possible and almost every AppleShare server available these
  days supports that, too.</para> <para>There still exist other services based
  on AppleTalk (databases, time services, electronic mail, remote
  administration, etc.) but with TCP/IP playing the main role in our networks
  today, almost all those services can be used additionally or solely via
  TCP/IP, too.</para></sect2>

  <sect2><title>AppleTalk is bad, isn&#39;t it?</title> <para>Short answer:
  No, it is <emphasis>not</emphasis>.</para> <para>Long answer: Many people
  believe that AppleTalk is not only slow but causes also a network base load
  of 90 percent or above caused by its built-in self-administration
  capabilities and the resulting verbosity. While the first is common
  knowledge, the latter doesn&#39;t apply in general.</para> <para>10 or more
  years ago, AppleShare clients permanently polled server volumes for changes,
  which increased the network load directly proportional to the number of
  clients connected to the server. In case an ethernet bus topology has been
  used, this behaviour could have led to a situation where more than the half
  of packets have been dropped due to collisions.</para> <para>But hey,
  that&#39;s been yesterday. Apple introduced the so called &#34;server
  notifications&#34; to stop client&#39;s hammering the server with requests
  for changes. Instead AppleShare server nowadays (even Netatalk :-) notify
  the clients about changes only when something really has changed. This fact
  and the switched environments lead to a situation where AppleTalk traffic
  plays no significant role at all nowadays.</para> <para>Normally, there are
  not that much good reasons to disable AppleTalk in your network.</para></sect2>

  <sect1><title>...and Tomorrow</title></sect1>

  <sect1><title>Basic AppleTalk concepts</title></sect1>

  <sect1><title>AppleTalk protocols</title></sect1>

  <sect1><title>Addressing scheme</title></sect1>

  <sect1><title>Address assignment (AARP)</title></sect1>

  <sect1><title>Names and services (NBP)</title></sect1>

  <sect1><title>Avoiding cluttered networks (ZIP/RTMP)</title></sect1>

  <sect1><title>Invisible servants</title></sect1>

  <sect1><title>Little Helpers</title></sect1>

  <sect1><title>The purpose of all</title></sect1>
</chapter>