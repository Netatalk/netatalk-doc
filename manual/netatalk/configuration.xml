<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Setting up Netatalk</title>

  <sect1>
    <title>Appletalk</title>

    <sect2>
      <title>Setting up AppleTalk</title>

      <para>The AppleTalk protocol is configured in atalkd.conf. For detailed
      information please reference <ulink
      url="http://www.neon.com/atalk_routing.html">http://www.neon.com/atalk_routing.html</ulink>
      and <ulink url="http://www-commeng.cso.uiuc.edu/docs/appletalk/">http://www-commeng.cso.uiuc.edu/docs/appletalk/</ulink></para>

      <para>The whole point of setting up atalkd is to allow AppleTalk routing
      to the localhost as a file and print server. The atalkd.conf file sets
      up the AppleTalk routing by assigning AppleTalk zone (or zones)
      information to the networks it is attached to.</para>

      <para>Within AppleTalk there are three different types of routers:
      seed,nonseed and soft seed.</para>

      <para>Seed publishes the network and zone information to the network. In
      the case of a conflict, this router takes precedence. Nonseed acts as a
      forwarder in that all network and zone information for its network
      segment is pulled from an upstream router. A soft seed router is
      configured like a seed router, but will defer and use upstream seeded
      zone information if there is a conflict.</para>

      <para>Netatalk has the option to behave like a nonseed router or a soft
      seed router. Netatalk will defer to an upstream seed if there is a
      conflict. Any missing configurations will be filled from the network.
      Appletalk phases are of two types. The unused, unsupported, obsolete
      phase 1, or the new useful phase 2. Phase 1 was Apple&#39;s original
      protocol for Appletalk over LocalTalk. It treated an entire network
      segment as one AppleTalk network capable of holding 254 nodes. Don&#39;t
      use this unless you are directly connected to a LocalTalk network
      (unlikely these days). Phase 2 is the new version. It allows a
      configurable network range between the numbers 1 and 65279, each network
      capable of hosting 253 nodes for a total of 16,515,587 AppleTalk
      interfaces. That&#39;s a lot of iMacs. :-)</para>

      <para>Within an AppleTalk network addressing is a Network:Node:Socket
      triplet. The socket number is generally dropped because nothing uses the
      information. Using ethernet and phase 2 the network number can be
      singular, &#39;1&#39; or a range, &#39;1-20&#39;. Node assignment is the
      responsibility of the clients so you don&#39;t have to worry about it.
      The range of 65280-65534 is called the startup range and is used by the
      Mac when it is on a network without any routers, you probably
      shouldn&#39;t publish a network within this range. If you&#39;re
      publishing to a LocalTalk network segment (Hello? Welcome to Y2K. :)
      your maximum network range is _one_ network. <emphasis>Zones must be
      less then 32 characters long</emphasis>. Format of lines in this file:
      interface [ -seed ] [ -router | -dontroute ] [ -phase { 1 | 2 } ] [
      -addr net.node ] [ -net first[-last] ] [ -zone ZoneName ] ...</para>

      <itemizedlist>
        <listitem>
          <para>interface: the interface that is publishing the appletalk
          server. e.g. eth0</para>
        </listitem>

        <listitem>
          <para>-seed - requires two interfaces. The router is acting as a
          bridge between the two networks. A soft seed router.</para>
        </listitem>

        <listitem>
          <para>-router - only requires one interface.</para>
        </listitem>

        <listitem>
          <para>-dontroute - don&#39;t publish routing information</para>
        </listitem>

        <listitem>
          <para>-addr this machines network.node address.</para>
        </listitem>
      </itemizedlist>

      <para>Examples:</para>

      <example>
        <title>atalk.conf for automatic configuration</title>

        <para><programlisting>eth0</programlisting>Appletalk network is on the
        eth0 interface, no routing information published, get it all off the
        network.</para>
      </example>

      <example>
        <title>a little more complicated atalk.conf example</title>

        <para><programlisting>eth0 -router -phase 2 -addr 100.10 -net 100-110 -zone &#34;Upstairs&#34;</programlisting>Appletalk
        network is on eth0, this server is not a bridge, it publishes zone
        information for Networks 100-110. The servers appletalk node address
        is node 10 of network 100. This zone is called Upstairs.</para>
      </example>

      <example>
        <title>atalk.conf for configuring a seed router</title>

        <para><programlisting>eth0 -phase 2
eth1 -seed -phase 2 -addr 100.10 -net 100-110 -zone &#34;Upstairs&#34;</programlisting>This
        allows routing between the appletalk networks on eth0 and eth1, for
        eth1 this server acts as a soft seed router of a phase 2 network
        segment of 100-110 where this machine is 100.</para>
      </example>
    </sect2>
  </sect1>

  <sect1>
    <title>File Services</title>

    <para>Netatalk supplies two different types of AFP servers and both can
    run at the same time. Classic AFP over AppleTalk requires the
    <command>afpd</command> and <command>atalkd</command> daemons. AFP over IP
    only requires <command>afpd</command>.</para>

    <sect2>
      <title>Setting up a the AFP file server</title>

      <para>AFP (the Apple Filing Protocol) is the protocol Apple Macintoshs
      use for file services. The protocol has evolved over the years, at the
      time of this writing 6 different &#34;dialects&#34; exist. The latest
      changes to the protocol, called &#34;AFP 3.1&#34;, were added with the
      release of Panther (OSX 10.3).</para>

      <para>AFP3 brought some big changes. For the first time, Apple Clients
      can use filenames up to 255 characters (actually 255 bytes), UTF-8 is
      used on the wire and large files (&#62;4GB) are supported.</para>

      <para>The afpd deamon offers the fileservices to Apple Clients. It&#39;s
      configured using the <filename>afpd.conf</filename> and the
      <filename>AppleVolumes.*</filename> files.</para>

      <sect3>
        <title>afpd.conf</title>

        <para>afpd.conf is the configuration file used by afpd to determine
        the behavior and configuration of the different virtual file servers
        that it provides. Any line not prefixed with <keycode>&#39;#</keycode>&#39;
        is interpreted.</para>

        <para>Format: - [options] to specify options for the default server
        and/or &#34;Server name&#34; [options] to specify an additional server</para>

        <para>Leaving the afpd.conf file empty equals to the following
        configuration:</para>

        <para><programlisting>- -transall -uamlist uams_guest.so,uams_clrtxt.so,uams_dhx.so -nosavepassword</programlisting></para>

        <para>For a more detailed explanation of the available options, please
        refer to the <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
        man page.</para>
      </sect3>

      <sect3>
        <title>AppleVolumes.default</title>

        <para>The AppleVolumes.default file is used to define volume that will
        by default be shown to all users, including users logged in as guest.
        A volume will not be presented in the chooser, if the user has no read
        access to the specified volume path.</para>

        <para>You can limit access to a specific volume by using the
        <option>allow</option> and <option>deny</option> options.</para>

        <para>For a more detailed explanation of the available options, please
        refer to the <citerefentry><refentrytitle>AppleVolumes.default</refentrytitle><manvolnum>5</manvolnum></citerefentry>
        man page.</para>
      </sect3>

      <sect3 id="CNID-backends">
        <title>CNID backends</title>

        <para>Unlike other protocols like smb or nfs, the AFP protocol mostly
        refers to files and directories by ID and not by a path. A typical AFP
        request uses a directory ID and a filename, something like
        <phrase><phrase>&#34;server, please open the file named &#39;Test&#39;
        in the directory with id 167&#34;</phrase>. For example
        &#34;Aliases&#34; on the Mac basically work by ID.</phrase></para>

        <para>Every file in an AFP volume has to have a unique ID, IDs must,
        according to the specs, never be reused, and ID&#39;s are 32 bit
        numbers. So, after ~4 billion files have been written to an AFP
        volume, the ID pool is depleted and no new file can be written to the
        volume. No whining please :-)</para>

        <para>Netatalk needs to map IDs to files and folders in the host
        filesystem. To achive this, several different CNID backends are
        available. A CNID backend is basically a database storing ID
        &#60;-&#62; name mappings.</para>

        <para>In the past, many users used the so called &#34;last&#34; CNID
        scheme. However, this scheme has some serious drawbacks, as it is
        based on the device and inode of a file. Therefore, IDs will be
        eventually be reused and you can get duplicate IDs as well.</para>

        <para>The CNID Databases are by default located in the .AppleDB folder
        in every afpd volume root. With the new AD2 format, afpd stores the
        files/directories ID in the corresponding .AppleDouble file as well.</para>

        <note>
          <para>There are some CNID related things you should keep in mind
          when working with netatalk:</para>

          <itemizedlist>
            <listitem>
              <para>Don&#39;t use unix symlinks. Just don&#39;t. With a
              symlink a file/directory &#34;exists&#34; twice, something AFP
              doesn&#39;t allow. There&#39;s currently no way this can be
              resolved, as we either end up with two file/dirs having the same
              id, or a files having two parents. If you still insist on using
              them, be aware you&#39;re <emphasis>heavily</emphasis> violating
              the specs. You have been warned...</para>
            </listitem>

            <listitem>
              <para>Don&#39;t nest volumes.</para>
            </listitem>

            <listitem>
              <para>CNID backends are databases, so they turn afpd into a file
              server/database mix. Keep this in mind, killing an afpd process
              with <command>kill -9</command> will likely leave the database
              unusable.</para>
            </listitem>

            <listitem>
              <para>If there&#39;s no more space on the filesystem left, the
              database will get corrupted. You can work around this by either
              using the -dbpath option and put the database files into another
              location or, if you use quotas, make sure the .AppleDB folder is
              owned by a user/group without a quota.</para>
            </listitem>
          </itemizedlist>
        </note>

        <para></para>

        <sect4>
          <title>cdb</title>

          <para>The &#34;concurrent database&#34; backend is based on
          sleepycat&#39;s Berkely DB. With this backend several afpd deamons
          access the CNID database directly. Berkeley DB locking is used to
          synchronize access, if more than one afpd process is active for a
          volume. The drawback is, that the crash of a single afpd process
          might corrupt the database.</para>
        </sect4>

        <sect4>
          <title>dbd</title>

          <para>Access to the CNID database is restricted to a the cnid_metad
          daemon process. afpd processes communicate with the daemon for
          database reads and updates. If built with Berkeley DB transactions
          the probability for database corruption is practically zero, but
          performance can be slower than with cdb. As a database process gets
          spawned for each volume, you&#39;re probably better off using cdb
          for sharing home directories for a larger number of users.</para>
        </sect4>

        <sect4>
          <title>last</title>

          <para>The last backend is a semi persistent backend. ID&#39;s will
          be reused and, what is much worse, you can get duplicate IDs. You
          should use it for sharing cdroms only, <emphasis>don&#39;t</emphasis>
          use it for sharing normal volumes.</para>
        </sect4>
      </sect3>

      <sect3>
        <title>Charsets/Unicode</title>

        <para></para>

        <sect4>
          <title>Why Unicode?</title>

          <para>Internally computers don&#39;t know anything about characters
          and texts, they only know numbers. Therefore, each letter is
          assigned a number. A character set, often referred to as
          <emphasis>charset</emphasis> or <emphasis>codepage</emphasis>,
          defines the mappings between numbers and letters.</para>

          <para>If two or more computer systems need to communicate with each
          other, the have to use the same charater set. In the 1960s the ASCII
          (American Standard Code for Information Interchange) character set
          was defined by the American Standards Association. The original form
          of ASCII represented 128 characters, more than enough to cover the
          English alphabet and numerals. Up to date, ASCII has been the
          normative character scheme used by computers.</para>

          <para>Later versions defined 256 characters to produce a more
          international fluency and to include some slightly esoteric
          graphical characters. Using this mode of encoding each character
          takes exactly one byte. Obviously, 256 characters still wasn&#39;t
          enough to map all the characters used in the various languages into
          one character set.</para>

          <para>As a result localized character sets were defined later, e.g
          the ISO-8859 character sets. Most operating system vendors
          introduced their own characters sets to satisfy their needs, e.g.
          IBM defined the <emphasis>codepage 437 (DOSLatinUS)</emphasis>,
          Apple introduced the <emphasis>MacRoman</emphasis> codepage and so
          on. The characters that were assigned number larger than 127 were
          referred to as <emphasis>extended</emphasis> characters. These
          character sets conflict with another, as they use the same number
          for different characters, or vice versa.</para>

          <para>Almost all of those characters sets defined 256 characters,
          where the first 128 (0-127) character mappings are identical to
          ASCII. As a result, communication between systems using different
          codepages was effectivly limited to the ASCII charset.</para>

          <para>To solve this problem new, larger character sets were defined.
          To make room for more character mappings, these character sets use
          at least 2 bytes to store a character. They are therefore referred
          to as <emphasis>multibyte</emphasis> character sets.</para>

          <para>One standardized multibyte charset encoding scheme is known as
          <ulink url="http://www.unicode.org/">unicode</ulink>. A big
          advantage of using a multibyte charset is that you only need one.
          There is no need to make sure two computers use the same charset
          when they are communicating.</para>
        </sect4>

        <sect4>
          <title>character sets used by Apple</title>

          <para>In the past, Apple clients used single-byte charsets to
          communicate over the network. Over the years Apple defined a number
          of codepages, western users will most likely be using the
          <emphasis>MacRoman</emphasis> codepage.</para>

          <para>Codepages defined by Apple include:</para>

          <itemizedlist>
            <listitem>
              <para>MacArabic, MacFarsi</para>
            </listitem>

            <listitem>
              <para>MacCentralEurope</para>
            </listitem>

            <listitem>
              <para>MacChineseSimple</para>
            </listitem>

            <listitem>
              <para>MacChineseTraditional</para>
            </listitem>

            <listitem>
              <para>MacCroation</para>
            </listitem>

            <listitem>
              <para>MacCyrillic</para>
            </listitem>

            <listitem>
              <para>MacDevanagari</para>
            </listitem>

            <listitem>
              <para>MacGreek</para>
            </listitem>

            <listitem>
              <para>MacHebrew</para>
            </listitem>

            <listitem>
              <para>MacIcelandic</para>
            </listitem>

            <listitem>
              <para>MacKorean</para>
            </listitem>

            <listitem>
              <para>MacJapanese</para>
            </listitem>

            <listitem>
              <para>MacRoman</para>
            </listitem>

            <listitem>
              <para>MacRomanian</para>
            </listitem>

            <listitem>
              <para>MacThai</para>
            </listitem>

            <listitem>
              <para>MacTurkish</para>
            </listitem>
          </itemizedlist>

          <para>Starting with OSX and AFP3, <ulink url="http://www.utf-8.com/">UTF-8</ulink>
          is used. UTF-8 encodes Unicode characters in an ASCII compatible
          way, each Unicode character is encoded into 1-6 ASCII characters.
          UTF-8 is therefore not really a charset itself, it&#39;s an encoding
          of the Unicode charset.</para>

          <para>To complicate things, Unicode defines several
          <emphasis><ulink
          url="http://www.unicode.org/reports/tr15/index.html">normalization</ulink></emphasis>
          forms. Contrary to the larger part of the IT industrie, which uses
          <emphasis>precomposed</emphasis>, Apple decided to use the
          <emphasis>decomposed</emphasis> normalization (Is that what they
          mean by <emphasis>&#34;think different&#34;</emphasis>?).</para>

          <para>For example lets take the German character &#39;<keycode>ä</keycode>&#39;.
          Using the precomposed normalization, Unicode maps this character to
          0xE4. In decomposed normalization, &#39;ä&#39; is actually mapped to
          two characters, 0x61 and 0x308. 0x61 is the mapping for an
          &#39;a&#39;, 0x308 is the mapping for a <emphasis>COMBINING
          DIAERESIS</emphasis>.</para>

          <para>Netatalk referres to precomposed UTF-8 as
          <emphasis>UTF8</emphasis> and to decomposed UTF-8 as
          <emphasis>UTF8-MAC</emphasis>.</para>
        </sect4>

        <sect4>
          <title>afpd and character sets</title>

          <para>To support new AFP 3.x and older AFP 2.x clients at the same
          time, afpd needs to be able to convert between the various charsets
          used. AFP 3.x clients always use UTF-8, AFP 2.2 clients use one of
          the Apple codepages.</para>

          <para>At the time of this writing, netatalk supports the following
          Apple codepages:</para>

          <itemizedlist>
            <listitem>
              <para>MacCentralEurope</para>
            </listitem>

            <listitem>
              <para>MacCyrillic</para>
            </listitem>

            <listitem>
              <para>MacHebrew</para>
            </listitem>

            <listitem>
              <para>MacRoman</para>
            </listitem>

            <listitem>
              <para>MacTurkish</para>
            </listitem>
          </itemizedlist>

          <para>afpd handles three different character set options:</para>

          <variablelist>
            <varlistentry>
              <term>unixcodepage</term>

              <listitem>
                <para>This is the codepage used internally by your operating
                system. If not specified and your system support Unix locales,
                afpd tries to detect the codepage, otherwise it defaults to
                ASCII. afpd uses this codepage to read its configuration
                files, so you can use extended characters for volume names,
                login messages, etc. see <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
                </para>

                <para></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>maccodepage</term>

              <listitem>
                <para>As already mentioned, older MacOS clients ( up to AFP
                2.2) use codepages to communicate with afpd. However, there is
                no support for negotiating the codepage used by the client in
                the AFP protocol. If not specified otherwise, afpd assumes the
                <emphasis>MacRoman</emphasis> codepage is used. In case
                you&#39;re clients use another codepage, e.g.
                <emphasis>MacCyrillic</emphasis>, you&#39;ll <emphasis
                role="bold">have</emphasis> to explicitly configure this. see
                <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>volcharset</term>

              <listitem>
                <para>This defines the charset afpd should use for filenames
                on disk. The default is UTF8. If you have <ulink
                url="http://www.gnu.org/software/libiconv/">iconv</ulink>
                installed, you can use any iconv provided charset as well.
                </para>

                <para>afpd needs a way to preserve extended macintosh
                characters, or characters illegal in unix filenames, when
                saving files on a unix filesystem. Earlier versions used the
                the so called CAP encoding. An extended character (&#62;0x7F)
                would be converted to a :xx hex sequence, e.g. the Apple Logo
                (MacRoman: 0XF0) was saved as :f0. Some special characters
                will be converted as to :xx notation as well. &#39;/&#39; will
                be encoded to :2f, if -usedots is not specified, a leading dot
                &#39;.&#39; will be encoded as :2e. Even though this version
                now uses UTF-8 as the default encoding for filenames, special
                characters, like &#39;/&#39; and a leading &#39;.&#39; will
                still be CAP style encoded . For western users another useful
                setting could be <emphasis>-volcharset ISO-8859-15</emphasis>.
                </para>

                <para>If a character cannot be converted from the mac codepage
                to the selected volcharset, afpd will save it as a CAP encoded
                character. For AFP3 clients, afpd will convert the UTF-8
                character to <emphasis>maccodepage</emphasis> first. If this
                conversion fails, you&#39;ll receive a -50 error on the mac.
                <emphasis>Note</emphasis>: Whenever you can, please stick with
                the default UTF-8 volume format. see
                <citerefentry><refentrytitle>AppleVolumes.default</refentrytitle><manvolnum>5</manvolnum></citerefentry>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect4>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Printing</title>

    <para></para>

    <sect2>
      <title>Setting up the PAP print server</title>

      <para># Attributes are: # # Name Type Default Description # pd str
      &#34;.ppd&#34; Pathname to ppd file. # pr str &#34;lp&#34; LPD printer
      name. # pa str &#34;0.0&#34; AppleTalk address (not usually needed). #
      op str &#34;operator&#34; Operator name, for LPD spooling. # au flag
      not-present If present, authentication required # note that if ca and sp
      are both set, # ca will be tried first and then sp # am str none Comma
      separated list of uams to use # (for every printer) whenever #
      authentication is on # ca str not-present If present, use cap-style
      authentication # directory to place print authentication files # sp flag
      not-present use PSSP authentication. # # Some examples: # A simple
      example: # # terminator:\ # :pr=lp:op=wes:\ #
      :pd=/usr/share/lib/ppd/HPLJ_4M.PPD: # # An example with authenticated
      printing: # authprn:\ # :pr=|/usr/bin/lpr -Plp:\ #
      :pd=/usr/share/lib/ppd/HPLJ_4M.PPD:\ # :sp:ca=/tmp/print:\ #
      :am=uams_clrtxt.so: # # Note also that papd.conf can list several
      printers. # # The printer name in papd may be a full NBP-name of the
      form # name:type@zone, for example: # Printer 1:LaserWriter@Printing and
      Mailing:\ # :pr=|/usr/bin/lpr -Plp1: # # Warning: If you are using more
      than 15 printers and you do not # specify the zone in the printer name,
      only some of the printers may # appear in the Chooser.</para>
    </sect2>
  </sect1>
</chapter>