<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Setting up Netatalk</title>

  <sect1>
    <title>Appletalk</title>

    <para>AppleTalk, the network protocol family founded by Apple, contains
    different protocols for different uses (address resolution, address/name
    mapping, service location, establishing connections, and the like)</para>

    <para>A complete overview can be found inside the developer documentation</para>

    <sect2>
      <title>To use AppleTalk or not</title>

      <para>You&#39;ll need the AppleTalk support built into netatalk in case
      you want to provide printing services via PAP by
      <citerefentry><refentrytitle>papd</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      or file services via AppleTalk via <citerefentry><refentrytitle>afpd</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      for older AFP clients not capable of using AFP over TCP. You&#39;ll need
      it also, if you want to use the depreciated AppleTalk-based timeserver
      <citerefentry><refentrytitle>timelord</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      for older Mac clients</para>

      <para>But even if you don&#39;t need PAP or AFP over AppleTalk, you
      might consider using AppleTalk for service propagation/location, having
      the ease of use for your network clients in mind. The Apple engineers
      implemented a way to easily locate an AFP server via AppleTalk but
      establishing the AFP connection itself via AFP over TCP (see the
      developer documentation for details on this cool feature, too)</para>

      <para>To use the different base AppleTalk protocols with netatalk, one
      has to use <citerefentry><refentrytitle>atalkd</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
      It can also be used as an AppleTalk router to connect different
      independent network segments to each other.</para>

      <para>To use AppleTalk/atalkd, your system has to have kernel support
      for AppleTalk. On some systems, that netatalk supports, this isn&#39;t
      currently true (notably True64 Unix) so you can use only netatalk
      services that do not rely on AppleTalk (which means &#34;AFP over
      TCP&#34; and requires the -noddp switch in afpd.conf )</para>
    </sect2>

    <sect2>
      <title>No AppleTalk routing</title>

      <para>This is the most simple form, you can use AppleTalk with netatalk.
      In case, you have only one network interface up and running, you
      haven&#39;t to deal with atalkd&#39;s config at all: atalkd will use
      AppleTalk&#39;s self-configuration features to get an AppleTalk address
      and to register itself in the network automagically.</para>

      <para>In case, you have more than one active network interface, you have
      to make a decision:</para>

      <itemizedlist>
        <listitem>
          <para>Using only one interface: You&#39;ve to add the
          interface&#39;s name (en1, le0, eth2, ... for example) to
          atalkd.conf on a single line. Do only list <emphasis>one</emphasis>
          here.</para>

          <example>
            <title>atalkd.conf containing one entry</title>

            <para><programlisting>eth0</programlisting>Appletalk networking
            should be enabled on eth0 interface. All the necessary
            configuration will be fetched from the network</para>
          </example>

          <para>After startup, atalkd will add the real settings (address and
          network and eventually a zone) to atalkd.conf on its own</para>

          <example>
            <title>atalkd.conf containing one entry after atalkd started</title>

            <para><programlisting>eth0 -phase 2 -net 0-65534 -addr 65280.166</programlisting>
            atalkd filled in the AppleTalk settings that apply to this network
            segment. A netrange of 0-65534 is a sign that there is no
            AppleTalk router present, so atalkd will fetch an address that
            matches the following criteria: netrange from inside the so called
            &#34;startup range&#34; 65280-65533 and a node address between 142
            and 255</para>
          </example>
        </listitem>

        <listitem>
          <para>When using several interfaces you have to add them line by
          line following the &#34;-dontroute&#34; switch in atalkd.conf</para>

          <example>
            <title>atalkd.conf containing several entries with the -dontroute
            option</title>

            <para><programlisting>eth0 -dontroute
eth1 -dontroute
eth2 -dontroute</programlisting>Appletalk networking should be enabled on all
            three interfaces but no routing should be done between the
            different segments. Again, all the necessary configuration will be
            fetched from the connected networks</para>
          </example>

          <example>
            <title>atalkd.conf containing several entries with the -dontroute
            option after atalkd started</title>

            <para><programlisting>eth0 -dontroute -phase 2 -net 0-65534 -addr 65280.152
eth1 -dontroute -phase 2 -net 0-65534 -addr 65280.208
eth2 -dontroute -phase 2 -net 1-1000 -addr 10.142 -zone &#34;Printers&#34;</programlisting>
            On eth0 and eth1 no other routers are present, so atalkd chooses
            an address from within the startup range. But on eth2 there lives
            an already connected AppleTalk router, publishing one zone called
            &#34;Printers&#34; and forcing clients to assign theirselves an
            address in a netrange between 1 and 1000</para>
          </example>

          <para>In this case atalkd will handle each interface as it would be
          the only active one. This can have some side effects when it comes
          to the point where AFP clients want to do the magic switch from
          AppleTalk to TCP, so use this with caution</para>
        </listitem>
      </itemizedlist>

      <para>In case, you have more than one active network interface and do
      not take special precautions as outlined above, then autoconfiguration
      of the interfaces might fail in a situation where one of your network
      interfaces is connected to a network where <emphasis>no</emphasis> other
      active AppleTalk router is present and supplies appropriate routing
      settings.</para>

      <para>For further information see <citerefentry><refentrytitle>atalkd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      and the developer documentation</para>
    </sect2>

    <sect2>
      <title>atalkd acting as an AppleTalk router</title>

      <para>There exist several types of AppleTalk routers: seed, non-seed and
      so called soft-seed routers.</para>

      <itemizedlist>
        <listitem>
          <para>A seed router has its own configuration and publishes this
          into the network segments it is configured for</para>
        </listitem>

        <listitem>
          <para>A non-seed router needs a seed router on the interface to
          which it is connected to learn the network configuration. So this
          type of AppleTalk router can work completely without manual
          configuration.</para>
        </listitem>

        <listitem>
          <para>A so called soft-seed router is exactly the same as a non-seed
          router except the fact, that it can also remember the configuration
          of a seed router and act as a replacement in case, the real seed
          router disappears from the net.</para>
        </listitem>
      </itemizedlist>

      <para>Netatalk&#39;s atalkd can act as both a seed and a soft-seed
      router, even in a mixed mode, where it acts on one interface in this way
      and on the other in another.</para>

      <para>If you leave your atalkd.conf completely empty or simply add all
      active interfaces line by line without using seed settings (atalkd will
      act identically in both cases) then atalkd is forced to act as a
      soft-seed router on each interface, so it will fail on the first
      interface, where no seed router is accessible to fetch routing
      information from.</para>

      <para>In this case other services, that depend on atalkd, might also
      fail.</para>

      <para>So you should have atalkd act as a seed router on one or all
      active interfaces. A seed router has to supply informations about:</para>

      <itemizedlist>
        <listitem>
          <para>The specific netrange on this segment</para>
        </listitem>

        <listitem>
          <para>The own AppleTalk address</para>
        </listitem>

        <listitem>
          <para>The zones (one to many) available in this segment</para>
        </listitem>

        <listitem>
          <para>The so called &#34;default zone&#34; for this segment</para>
        </listitem>
      </itemizedlist>

      <para><emphasis>Unless you are the network admin yourself, consider
      asking her/him before changing anything related to AppleTalk routing, as
      changing these settings might have side effects for all of your
      AppleTalk network clients</emphasis></para>

      <para>In an AppleTalk network netranges have to be unique and zone
      settings have to match each other router&#39;s configuration.
      Fortunately netatalk&#39;s atalkd is polite enough to check whether your
      settings are in conflict with already existing ones on the net. In such
      a case it simply discards your settings and tries to adapt the already
      established ones on the net (if in doubt, always check syslog for
      details).</para>

      <para>Netranges, you can use, include pretty small ones, eg. 42-42, to
      very large ones, eg. 1-65279 - the latter one representing the maximum.
      In routed environments you can use any numbers in the range between 1
      and 65279 unless they do not overlap with settings of other connected
      subnets.</para>

      <para>The own AppleTalk address consists of a net part and a node part
      (the former 16 bit, the latter 8 bit, for example 12057.143). Apple
      recommends using node addresses of 128 or above for servers, letting
      client Macs assign themselves an address faster (as they will primarily
      search for a node address within 1-127 in the supplied netrange). As we
      don&#39;t want to get in conflict with Apple servers, we prefer using
      node addresses of 142 or above.</para>

      <para>AppleTalk zones have <emphasis>nothing</emphasis> to do with
      physical networks. They&#39;re just a hint for your client&#39;s
      convenience, letting them locate network ressources in a more
      comfortable/faster way. You can either use one zone name accross
      multiple physical segments as well as more than one zone name on a
      single segment (and various combinations of this)</para>

      <para>So all you have to do is to <emphasis>draw a network chart</emphasis>
      containing the physical segments, the netranges you want to assign to
      each one, the zone names you want to publish in which segments and the
      default zone per segment (this is always the first zone name, you supply
      with the &#34;-zone&#34; switch in atalkd.conf)</para>

      <para>Given, you finished the steps outlined above, you might want to
      edit atalkd.conf to fit your needs.</para>

      <para>You&#39;ll have to set the following options in atalkd.conf:</para>

      <itemizedlist>
        <listitem>
          <para>-net (use reasonable values between 1-65279 for each
          interface)</para>

          <para>In case, this value is suppressed but -addr is present, the
          netrange from this specific address will be used</para>
        </listitem>

        <listitem>
          <para>-addr (the net part must match the -net settings if present,
          the node address should be between 142 and 255)</para>
        </listitem>

        <listitem>
          <para>-zone (can be used multiple times in one single line, the
          first entry is the default zone)</para>
        </listitem>
      </itemizedlist>

      <para>Note that you are able to set up &#34;zone mapping&#34;, that
      means publishing exactly the same zone name on all AppleTalk segments,
      as well as providing more than one single zone name per interface. Dumb
      AppleTalk devices, like LaserWriters, will always register themselves in
      the default zone (the first zone entry you use in atalkd.conf per
      interface), more intelligent ones will have the ability to choose one
      specific zone via a user interface.</para>

      <example>
        <title>atalkd.conf making netatalk a seed router on two interfaces</title>

        <para><programlisting>eth0 -seed -phase 2 -net 1-1000 -addr 1000.142 -zone &#34;Printers&#34; -zone &#34;Spoolers&#34;
eth1 -seed -phase 2 -net 1001-2000 -addr 2000.142 -zone &#34;Macs&#34; -zone &#34;Servers&#34;</programlisting>
        The settings for eth0 force AppleTalk devices within the connected
        network to assign theirselves an address in the netrange 1-1000. Two
        zone names are published into this segment, &#34;Printers&#34; being
        the so called &#34;standard zone&#34;, forcing dumb AppleTalk devices
        like Laserprinters to show up automatically into this zone. AppleTalk
        printer queues supplied by netatalk&#39;s papd can be registered into
        the zone &#34;Spoolers&#34; simply by adjusting the settings in
        <citerefentry><refentrytitle>papd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
        On eth1 we use the different and non-overlapping netrange 1001-2000,
        set the default zone to &#34;Macs&#34; and publish a fourth zone name
        &#34;Servers&#34;.</para>
      </example>

      <example>
        <title>atalkd.conf configured for &#34;zone mapping&#34;</title>

        <para><programlisting>eth0 -seed -phase 2 -net 1-1000 -addr 1000.142 -zone &#34;foo&#34;
lo0 -phase 1 -net 1 -addr 1.142 -zone &#34;foo&#34;</programlisting> We use
        the same network settings as in the example above but let atalkd
        publish the same zone name on both segments. As the same zone name
        will be used on all segments of the AppleTalk network no zone names
        will show up at all... but AppleTalk routing will still be active. In
        this case, we connect a so called &#34;non-extended&#34; LocalTalk
        network (phase 1) to an EtherTalk &#34;extended&#34; network (phase 2)
        transparently.</para>
      </example>

      <example>
        <title>atalkd.conf for a soft-seed router configuration</title>

        <para><programlisting>eth0
eth1
eth2</programlisting> As we have more than one interface, atalkd will try to
        act as an AppleTalk router between both segments. As we don&#39;t
        supply any network configuration on our own we depend on the
        availability of seed routers in every connected segment. If only one
        segment is without such an available seed router the whole thing will
        fail.</para>
      </example>

      <example>
        <title>atalkd.conf for a soft-seed router configuration after atalkd
        started</title>

        <para><programlisting>eth0 -phase 2 -net 10-10 -addr 10.166 -zone &#34;Parking&#34;
eth1 -phase 2 -net 10000-11000 -addr 10324.151 -zone &#34;No Parking&#34; -zone &#34;Parking&#34;
eth2 -phase 2 -net 65279-65279 -addr 65279.142 -zone &#34;Parking&#34; -zone &#34;No Parking&#34;</programlisting>
        In this case, active seed routers are present in all three connected
        networks, so atalkd was able to fetch the network configuration from
        them and, since the settings do not conflict, act as a soft-seed
        router from now on between the segments. So even in case, all of the
        three seed routers would disappear from the net, atalkd would still
        supply the connected network with the network configuration once
        learned from them. Only in case, atalkd would be restarted afterwards,
        the routing information will be lost (as we&#39;re not acting as seed
        router).</para>
      </example>

      <example>
        <title>atalkd.conf ready for mixed seed/soft-seed mode</title>

        <para><programlisting>eth0
eth1 -seed -phase 2 -net 99-100 -addr 99.200 -zone &#34;Testing&#34;</programlisting>
        In case in the network connected to eth0 lives no active seed router
        or one with a mismatching configuration (eg. an overlapping netrange
        of 1-200) atalkd will fail. Otherwise it will fetch the configuration
        from this machine and will route between eth0 and eth1, on the latter
        acting as a seed router itself.</para>
      </example>

      <para>By the way: it is perfectly legal to have more than one seed
      router connected to a network segment. But in this case, you should take
      care that the configuration of all connected routers is exactly the same
      regarding netranges, published zone names and also the &#34;standard
      zone&#34; per segment</para>
    </sect2>
  </sect1>

  <sect1>
    <title>File Services</title>

    <para>Netatalk supplies two different transport protocols for AFP<indexterm><primary>AFP</primary><secondary>Apple
    Filing Protocol</secondary></indexterm> services and both can run at the
    same time. Classic AFP over AppleTalk requires the <command>afpd</command>
    and <command>atalkd</command> daemons. AFP over IP only requires
    <command>afpd</command>.</para>

    <sect2>
      <title>Setting up the AFP file server</title>

      <para>AFP (the Apple Filing Protocol) is the protocol Apple Macintoshs
      use for file services. The protocol has evolved over the years, at the
      time of this writing 7 different &#34;versions&#34; exist. The latest
      changes to the protocol, called &#34;AFP 3.1&#34;, were added with the
      release of Panther<indexterm><primary>Panther</primary><secondary>Mac OS
      X 10.3</secondary></indexterm> (Mac OS X 10.3).</para>

      <para>AFP3 brought some big changes. For the first time, AppleShare<indexterm><primary>AppleShare</primary><secondary>Synonym
      for an AFP server</secondary></indexterm> Clients can use filenames up
      to 255 characters (actually 255 bytes leading to 85-255 chars depending
      on the glyphs used), UTF-8 is used on the wire and large files
      (&#62;4GB) are supported.</para>

      <para>The afpd deamon offers the fileservices to Apple Clients. It&#39;s
      configured using the <filename>afpd.conf</filename> and the
      <filename>AppleVolumes.*</filename> files.</para>

      <sect3>
        <title>afpd.conf</title>

        <para>afpd.conf is the configuration file used by afpd to determine
        the behavior and configuration of the different virtual file servers
        that it provides. Any line not prefixed with <keycode>&#39;#</keycode>&#39;
        is interpreted.</para>

        <para>If afpd switches set on the command line are in conflict with
        afpd.conf settings, the latter will have higher priority</para>

        <para>Format: - [options] to specify options for the default server
        and/or &#34;Server name&#34; [options] to specify an additional server</para>

        <para>Leaving the afpd.conf file empty equals to the following
        configuration:</para>

        <para><programlisting>- -transall -uamlist uams_guest.so,uams_clrtxt.so,uams_dhx.so -nosavepassword</programlisting></para>

        <para>For a more detailed explanation of the available options, please
        refer to the <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
        man page.</para>
      </sect3>

      <sect3>
        <title>AppleVolumes.default</title>

        <para>The AppleVolumes.default file is used to define volumes that
        will by default be shown to all users, including users logged in as
        guest. A volume will not be presented in the chooser, if the user has
        no read access to the specified volume path.</para>

        <para>You can limit access to a specific volume by using the
        <option>allow</option> and <option>deny</option> options.</para>

        <para>For a more detailed explanation of the available options, please
        refer to the <citerefentry><refentrytitle>AppleVolumes.default</refentrytitle><manvolnum>5</manvolnum></citerefentry>
        man page.</para>
      </sect3>

      <sect3 id="CNID-backends">
        <title>CNID<indexterm><primary>CNID</primary><secondary>Catalog Node
        ID</secondary></indexterm> backends</title>

        <para>Unlike other protocols like smb or nfs, the AFP protocol mostly
        refers to files and directories by ID and not by a path. A typical AFP
        request uses a directory ID<indexterm><primary>DID</primary><secondary>Directory
        ID</secondary></indexterm> and a filename, something like
        <phrase>&#34;server, please open the file named &#39;Test&#39; in the
        directory with id 167&#34;</phrase>. For example &#34;Aliases&#34; on
        the Mac basically work by ID (with a fallback to the absolute path in
        more recent AFP clients. But this applies only to Finder, not to
        applications).</para>

        <para>Every file in an AFP volume has to have a unique file ID<indexterm><primary>FID</primary><secondary>File
        ID</secondary></indexterm>, IDs must, according to the specs, never be
        reused, and IDs are 32 bit numbers (Directory IDs use the same ID
        pool). So, after ~4 billion files/folders have been written to an AFP
        volume, the ID pool is depleted and no new file can be written to the
        volume. No whining please :-)</para>

        <para>Netatalk needs to map IDs to files and folders in the host
        filesystem. To achieve this, several different CNID backends<indexterm><primary>CNID
        backend</primary><secondary>CNID database</secondary></indexterm> are
        available. A CNID backend is basically a database storing ID
        &#60;-&#62; name mappings.</para>

        <para>In the past, many users used the so called &#34;last&#34; CNID
        scheme. However, this scheme has some serious drawbacks, as it is
        based on the device and inode of a file. Therefore, IDs will be
        eventually be reused and you can get duplicate IDs as well.</para>

        <para>The CNID Databases are by default located in the .AppleDB<indexterm><primary>AppleDB</primary><secondary>CNID
        database folder</secondary></indexterm> folder in every afpd volume
        root. With the new ADv2<indexterm><primary>ADv2</primary><secondary>AppleDouble
        v2</secondary></indexterm> format, afpd stores the files/directories
        ID in the corresponding .AppleDouble file as well.</para>

        <note>
          <para>There are some CNID related things you should keep in mind
          when working with netatalk:</para>

          <itemizedlist>
            <listitem>
              <para>Don&#39;t use unix symlinks<indexterm><primary>Symlink</primary><secondary>Unix
              softlink</secondary></indexterm>. Just don&#39;t. With a symlink
              a file/directory &#34;exists&#34; twice, something AFP
              doesn&#39;t allow. There&#39;s currently no way this can be
              resolved, as we either end up with two file/dirs having the same
              id, or a file having two parents. If you still insist on using
              them, be aware you&#39;re <emphasis>heavily</emphasis> violating
              the specs. You have been warned...</para>
            </listitem>

            <listitem>
              <para>Don&#39;t nest volumes<indexterm><primary>Nested volumes</primary></indexterm>.</para>
            </listitem>

            <listitem>
              <para>CNID backends are databases, so they turn afpd into a file
              server/database mix. Keep this in mind, killing an afpd process
              with <command>kill -9</command> will likely leave the database
              unusable.</para>
            </listitem>

            <listitem>
              <para>If there&#39;s no more space on the filesystem left, the
              database will get corrupted. You can work around this by either
              using the -dbpath option and put the database files into another
              location or, if you use quotas, make sure the .AppleDB folder is
              owned by a user/group without a quota.</para>
            </listitem>
          </itemizedlist>
        </note>

        <para></para>

        <sect4>
          <title>cdb<indexterm><primary>CDB</primary><secondary>&#34;cdb&#34;
          CNID backend</secondary></indexterm></title>

          <para>The &#34;concurrent database&#34; backend is based on
          sleepycat&#39;s Berkeley DB. With this backend several afpd deamons
          access the CNID database directly. Berkeley DB locking is used to
          synchronize access, if more than one afpd process is active for a
          volume. The drawback is, that the crash of a single afpd process
          might corrupt the database.</para>
        </sect4>

        <sect4>
          <title>dbd<indexterm><primary>DBD</primary><secondary>&#34;dbd&#34;
          CNID backend</secondary></indexterm></title>

          <para>Access to the CNID database is restricted to a the cnid_metad
          daemon process. afpd processes communicate with the daemon for
          database reads and updates. If built with Berkeley DB transactions
          the probability for database corruption is practically zero, but
          performance can be slower than with cdb. As a database process gets
          spawned for each volume, you&#39;re probably better off using cdb
          for sharing home directories for a larger number of users.</para>
        </sect4>

        <sect4>
          <title>last<indexterm><primary>Last</primary><secondary>&#34;last&#34;
          CNID backend</secondary></indexterm></title>

          <para>The last backend is a semi persistent backend. ID&#39;s will
          be reused and, what is much worse, you can get duplicate IDs. You
          should use it for sharing cdroms only, <emphasis>don&#39;t</emphasis>
          use it for sharing normal volumes.</para>
        </sect4>
      </sect3>

      <sect3 id="charsets">
        <title>Charsets/Unicode</title>

        <para></para>

        <sect4>
          <title>Why Unicode?</title>

          <para>Internally computers don&#39;t know anything about characters
          and texts, they only know numbers. Therefore, each letter is
          assigned a number. A character set, often referred to as
          <emphasis>charset</emphasis> or <emphasis>codepage</emphasis>,
          defines the mappings between numbers and letters.</para>

          <para>If two or more computer systems need to communicate with each
          other, the have to use the same charater set. In the 1960s the ASCII
          (American Standard Code for Information Interchange) character set
          was defined by the American Standards Association. The original form
          of ASCII represented 128 characters, more than enough to cover the
          English alphabet and numerals. Up to date, ASCII has been the
          normative character scheme used by computers.</para>

          <para>Later versions defined 256 characters to produce a more
          international fluency and to include some slightly esoteric
          graphical characters. Using this mode of encoding each character
          takes exactly one byte. Obviously, 256 characters still wasn&#39;t
          enough to map all the characters used in the various languages into
          one character set.</para>

          <para>As a result localized character sets were defined later, e.g
          the ISO-8859 character sets. Most operating system vendors
          introduced their own characters sets to satisfy their needs, e.g.
          IBM defined the <emphasis>codepage 437 (DOSLatinUS)</emphasis>,
          Apple introduced the <emphasis>MacRoman</emphasis> codepage and so
          on. The characters that were assigned number larger than 127 were
          referred to as <emphasis>extended</emphasis> characters. These
          character sets conflict with another, as they use the same number
          for different characters, or vice versa.</para>

          <para>Almost all of those characters sets defined 256 characters,
          where the first 128 (0-127) character mappings are identical to
          ASCII. As a result, communication between systems using different
          codepages was effectivly limited to the ASCII charset.</para>

          <para>To solve this problem new, larger character sets were defined.
          To make room for more character mappings, these character sets use
          at least 2 bytes to store a character. They are therefore referred
          to as <emphasis>multibyte</emphasis> character sets.</para>

          <para>One standardized multibyte charset encoding scheme is known as
          <ulink url="http://www.unicode.org/">unicode</ulink>. A big
          advantage of using a multibyte charset is that you only need one.
          There is no need to make sure two computers use the same charset
          when they are communicating.</para>
        </sect4>

        <sect4>
          <title>character sets used by Apple</title>

          <para>In the past, Apple clients used single-byte charsets to
          communicate over the network. Over the years Apple defined a number
          of codepages, western users will most likely be using the
          <emphasis>MacRoman</emphasis> codepage.</para>

          <para>Codepages defined by Apple include:</para>

          <itemizedlist>
            <listitem>
              <para>MacArabic, MacFarsi</para>
            </listitem>

            <listitem>
              <para>MacCentralEurope</para>
            </listitem>

            <listitem>
              <para>MacChineseSimple</para>
            </listitem>

            <listitem>
              <para>MacChineseTraditional</para>
            </listitem>

            <listitem>
              <para>MacCroation</para>
            </listitem>

            <listitem>
              <para>MacCyrillic</para>
            </listitem>

            <listitem>
              <para>MacDevanagari</para>
            </listitem>

            <listitem>
              <para>MacGreek</para>
            </listitem>

            <listitem>
              <para>MacHebrew</para>
            </listitem>

            <listitem>
              <para>MacIcelandic</para>
            </listitem>

            <listitem>
              <para>MacKorean</para>
            </listitem>

            <listitem>
              <para>MacJapanese</para>
            </listitem>

            <listitem>
              <para>MacRoman</para>
            </listitem>

            <listitem>
              <para>MacRomanian</para>
            </listitem>

            <listitem>
              <para>MacThai</para>
            </listitem>

            <listitem>
              <para>MacTurkish</para>
            </listitem>
          </itemizedlist>

          <para>Starting with Mac OS X and AFP3, <ulink
          url="http://www.utf-8.com/">UTF-8</ulink> is used. UTF-8 encodes
          Unicode characters in an ASCII compatible way, each Unicode
          character is encoded into 1-6 ASCII characters. UTF-8 is therefore
          not really a charset itself, it&#39;s an encoding of the Unicode
          charset.</para>

          <para>To complicate things, Unicode defines several
          <emphasis><ulink
          url="http://www.unicode.org/reports/tr15/index.html">normalization</ulink></emphasis>
          forms. Contrary to the larger part of the IT industrie, which uses
          <emphasis>precomposed</emphasis>, Apple decided to use the
          <emphasis>decomposed</emphasis> normalization (Is that what they
          mean by <emphasis>&#34;think different&#34;</emphasis>?).</para>

          <para>For example lets take the German character &#39;<keycode>ä</keycode>&#39;.
          Using the precomposed normalization, Unicode maps this character to
          0xE4. In decomposed normalization, &#39;ä&#39; is actually mapped to
          two characters, 0x61 and 0x308. 0x61 is the mapping for an
          &#39;a&#39;, 0x308 is the mapping for a <emphasis>COMBINING
          DIAERESIS</emphasis>.</para>

          <para>Netatalk referres to precomposed UTF-8 as
          <emphasis>UTF8</emphasis> and to decomposed UTF-8 as
          <emphasis>UTF8-MAC</emphasis>.</para>
        </sect4>

        <sect4>
          <title>afpd and character sets</title>

          <para>To support new AFP 3.x and older AFP 2.x clients at the same
          time, afpd needs to be able to convert between the various charsets
          used. AFP 3.x clients always use UTF-8, AFP 2.2 clients use one of
          the Apple codepages.</para>

          <para>At the time of this writing, netatalk supports the following
          Apple codepages:</para>

          <itemizedlist>
            <listitem>
              <para>MAC_CENTRALEUROPE</para>
            </listitem>

            <listitem>
              <para>MAC_CYRILLIC</para>
            </listitem>

            <listitem>
              <para>MAC_HEBREW</para>
            </listitem>

            <listitem>
              <para>MAC_ROMAN</para>
            </listitem>

            <listitem>
              <para>MAC_TURKISH</para>
            </listitem>
          </itemizedlist>

          <para>afpd handles three different character set options:</para>

          <variablelist>
            <varlistentry>
              <term>unixcodepage</term>

              <listitem>
                <para>This is the codepage used internally by your operating
                system. If not specified and your system support Unix locales,
                afpd tries to detect the codepage, otherwise it defaults to
                ASCII. afpd uses this codepage to read its configuration
                files, so you can use extended characters for volume names,
                login messages, etc. see <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry></para>

                <para></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>maccodepage</term>

              <listitem>
                <para>As already mentioned, older MacOS clients ( up to AFP
                2.2) use codepages to communicate with afpd. However, there is
                no support for negotiating the codepage used by the client in
                the AFP protocol. If not specified otherwise, afpd assumes the
                <emphasis>MacRoman</emphasis> codepage is used. In case
                you&#39;re clients use another codepage, e.g.
                <emphasis>MacCyrillic</emphasis>, you&#39;ll <emphasis
                role="bold">have</emphasis> to explicitly configure this. see
                <citerefentry><refentrytitle>afpd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>volcharset</term>

              <listitem>
                <para>This defines the charset afpd should use for filenames
                on disk. The default is UTF8. If you have <ulink
                url="http://www.gnu.org/software/libiconv/">iconv</ulink>
                installed, you can use any iconv provided charset as well.</para>

                <para>afpd needs a way to preserve extended macintosh
                characters, or characters illegal in unix filenames, when
                saving files on a unix filesystem. Earlier versions used the
                the so called CAP encoding. An extended character (&#62;0x7F)
                would be converted to a :xx hex sequence, e.g. the Apple Logo
                (MacRoman: 0XF0) was saved as :f0. Some special characters
                will be converted as to :xx notation as well. &#39;/&#39; will
                be encoded to :2f, if -usedots is not specified, a leading dot
                &#39;.&#39; will be encoded as :2e. Even though this version
                now uses UTF-8 as the default encoding for filenames, special
                characters, like &#39;/&#39; and a leading &#39;.&#39; will
                still be CAP style encoded . For western users another useful
                setting could be <emphasis>-volcharset ISO-8859-15</emphasis>.</para>

                <para>If a character cannot be converted from the mac codepage
                to the selected volcharset, afpd will save it as a CAP encoded
                character. For AFP3 clients, afpd will convert the UTF-8
                character to <emphasis>maccodepage</emphasis> first. If this
                conversion fails, you&#39;ll receive a -50 error on the mac.
                <emphasis>Note</emphasis>: Whenever you can, please stick with
                the default UTF-8 volume format. see
                <citerefentry><refentrytitle>AppleVolumes.default</refentrytitle><manvolnum>5</manvolnum></citerefentry></para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect4>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Printing</title>

    <para></para>

    <sect2>
      <title>Setting up the PAP print server</title>

      <para># Attributes are: # # Name Type Default Description # pd str
      &#34;.ppd&#34; Pathname to ppd file. # pr str &#34;lp&#34; LPD printer
      name. # pa str &#34;0.0&#34; AppleTalk address (not usually needed). #
      op str &#34;operator&#34; Operator name, for LPD spooling. # au flag
      not-present If present, authentication required # note that if ca and sp
      are both set, # ca will be tried first and then sp # am str none Comma
      separated list of uams to use # (for every printer) whenever #
      authentication is on # ca str not-present If present, use cap-style
      authentication # directory to place print authentication files # sp flag
      not-present use PSSP authentication. # # Some examples: # A simple
      example: # # terminator:\ # :pr=lp:op=wes:\ #
      :pd=/usr/share/lib/ppd/HPLJ_4M.PPD: # # An example with authenticated
      printing: # authprn:\ # :pr=|/usr/bin/lpr -Plp:\ #
      :pd=/usr/share/lib/ppd/HPLJ_4M.PPD:\ # :sp:ca=/tmp/print:\ #
      :am=uams_clrtxt.so: # # Note also that papd.conf can list several
      printers. # # The printer name in papd may be a full NBP-name of the
      form # name:type@zone, for example: # Printer 1:LaserWriter@Printing and
      Mailing:\ # :pr=|/usr/bin/lpr -Plp1: # # Warning: If you are using more
      than 15 printers and you do not # specify the zone in the printer name,
      only some of the printers may # appear in the Chooser.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Time Services<indexterm><primary>Timelord</primary><secondary>AppleTalk
    time server</secondary></indexterm></title>

    <para></para>

    <sect2>
      <title>Using Netatalk as a time server for Macintoshs</title>

      <para>&#34;timelord&#34;, an AppleTalk based time server, is depreciated
      these days. Use NTP<indexterm><primary>NTP</primary><secondary>Network
      Time Protocol</secondary></indexterm> instead.</para>
    </sect2>
  </sect1>
</chapter>